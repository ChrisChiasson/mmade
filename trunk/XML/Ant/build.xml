<?xml version="1.0" encoding="UTF-8"?>
<project name="DocBook Build" default="help" basedir=".">
	<!--you will almost always want to override
		basedir, documentation, mfiles, and xml
		when you <ant> this build file,
		unless you feel like building the XML`DocBook
		documentation-->
	<property environment="env"/>
	<!--As the name implies, this should be set to the directory *above*
		MMADE's XML directory.-->
	<property name="mmade_xml_parent_dir" location="${env.MMADE_XML_PARENT_DIR}"/>
	
	<!--beyond here is code that should only be reconfigured if you want to
		change the logic of the build-->
	<import
		file="${mmade_xml_parent_dir}/XML/Ant/${os.name} properties.xml"/>
	<import
		file="${mmade_xml_parent_dir}/XML/Ant/common properties.xml"/>
	<!--configure xml parsing-->
	<pathconvert dirsep="/" property="buildwithforwardslashes">
		<path location="${build}"/>
	</pathconvert>
	<taskdef name="mathematica" classname="com.wolfram.jlink.util.MathematicaTask"
		classpathref="jlink"/>
	<!--initialization-->
	<target name="init">
		<!--timestamp-->
		<tstamp/>
		<!--copy the source to the build directory-->
		<copy todir="${build}">
			<fileset dir="${src}"/>
		</copy>
	</target>
	<!--xvnc-->
	<target name="start-xvnc" if="usexvnc">
	  <exec executable="${vncserver}">
	    <arg value=":1"/>
	    <arg value="-geometry"/>
	    <arg value="${xvncgeometry}"/>
	    <arg value="-depth"/>
	    <arg value="${xvncdepth}"/>
	  </exec>
	</target>
	<target name="stop-xvnc" if="usexvnc">
	  <exec executable="${vncserver}">
	    <arg value="-kill"/>
	    <arg value=":1"/>
	  </exec>
	</target>
	<!--run mathematica-->
	<target name="exec-math" depends="start-xvnc">
		<property name="mFiles.m" location="${mmade_xml_parent_dir}/XML/Ant/mFiles.m"/>
		<!--mFiles.m Gets the files in the initfiles path reference.
			It also uses the mpath reference, mmade_xml_parent_dir property,
			usexvnc property, and usefront end property-->
		<mathematica exe="${math}">
			<![CDATA[Get@AntProperty["mFiles.m"]]]>
		</mathematica>
		<!--antcall target="stop-xvnc"/-->
	</target>
	<!--xsl initialization-->
	<target name="init-xsl" depends="init,exec-math">
		<!--fix EOL markers and convert tabs-->
		<fixcrlf srcdir="${build}" eol="lf" tab="remove" tablength="4"
			includes="**/*.m"/>
		<!--exec executable="xsltproc" dir="${build}">
			<arg value="-xinclude"/>
			<arg value="-nonet"/>
			<arg value="-o"/>
			<arg value="${xml-intermediate}"/>
			<arg value="${db_5_to_db_4.xsl}"/>
			<arg value="${xml}"/>
		</exec-->
		<!--java classname="${xsltclass}"
			fork="true" dir="${build}"
			maxmemory="${xsltmem}"
			classpathref="xsltclasspath">
			<sysproperty key="${docbuild}" value="${docbuildimpl}"/>
			<sysproperty key="${saxparse}" value="${saxparseimpl}"/>
			<sysproperty key="${parseconfig}" value="${xercesconfig}"/>
			<arg value="-r"/>
			<arg value="${resolverclass}"/>
			<arg value="-x"/>
			<arg value="${readerclass}"/>
			<arg value="-y"/>
			<arg value="${readerclass}"/>
			<arg value="-o"/>
			<arg value="${xml-intermediate}"/>
			<arg value="${xml}"/>
			<arg value="${db_5_to_db_4.xsl}"/>
			<arg value="target.database.document=file:///${buildwithforwardslashes}/olinkdb.xml"/>
			<arg value="target.filename=file:///${buildwithforwardslashes}/target.db"/>
		</java-->		
	</target>
	<!--check stylesheets directory-->
	<target name="check-xsl">
		<available property="xsl-available" file="${xsl}" type="dir"/>
		<fail message="${xsl} unavailable" unless="xsl-available"/>
	</target>
	<!--check html.xsl stylesheet-->
	<target name="check-html.xsl" depends="check-xsl">
		<available property="html.xsl-available" file="${html.xsl}" type="file"/>
		<fail message="${html.xsl} unavailable" unless="html.xsl-available"/>
	</target>
	<!--check html_chunk.xsl stylesheet-->
	<target name="check-html_chunk.xsl" depends="check-xsl">
		<available property="html_chunk.xsl-available" file="${html_chunk.xsl}" type="file"/>
		<fail message="${html_chunk.xsl} unavailable" unless="html_chunk.xsl-available"/>
	</target>
	<!--check fo.xsl stylesheet-->
	<target name="check-fo.xsl" depends="check-xsl">
		<available property="fo.xsl-available" file="${fo.xsl}" type="file"/>
		<fail message="${fo.xsl} unavailable" unless="fo.xsl-available"/>
	</target>
	<!--check xhtml.xsl stylesheet-->
	<target name="check-xhtml.xsl" depends="check-xsl">
		<available property="xhtml.xsl-available" file="${xhtml.xsl}" type="file"/>
		<fail message="${xhtml.xsl} unavailable" unless="xhtml.xsl-available"/>
	</target>
	<!--check xhtml_chunk.xsl stylesheet-->
	<target name="check-xhtml_chunk.xsl" depends="check-xsl">
		<available property="xhtml_chunk.xsl-available" file="${xhtml_chunk.xsl}" type="file"/>
		<fail message="${xhtml_chunk.xsl} unavailable" unless="xhtml_chunk.xsl-available"/>
	</target>
	<!--check xml sources directory and xml file-->
	<target name="check-src-xml">
		<available property="src-available" file="${src}" type="dir"/>
		<fail message="${src} unavailable" unless="src-available"/>
		<available property="xml-available"	file="${src}/${xml}" type="file"/>
		<fail message="${src}/${xml} unavailable" unless="xml-available"/>
	</target>
	<!--transformation to formatting objects-->
	<target name="to-fo"
		depends="init-xsl,check-fo.xsl,check-src-xml">
		<java classname="${xsltclass}"
			fork="true" dir="${build}"
			maxmemory="${xsltmem}"
			classpathref="xsltclasspath">
			<sysproperty key="${docbuild}" value="${docbuildimpl}"/>
			<sysproperty key="${saxparse}" value="${saxparseimpl}"/>
			<sysproperty key="${parseconfig}" value="${xercesconfig}"/>
			<arg value="-r"/>
			<arg value="${resolverclass}"/>
			<arg value="-x"/>
			<arg value="${readerclass}"/>
			<arg value="-y"/>
			<arg value="${readerclass}"/>
			<arg value="-o"/>
			<arg value="${xml-stem}.fo"/>
			<arg value="${xml}"/>
			<arg value="${fo.xsl}"/>
			<arg value="target.database.document=file:///${buildwithforwardslashes}/olinkdb.xml"/>
			<arg value="target.filename=file:///${buildwithforwardslashes}/target.db"/>
		</java>
	</target>
	<!--xep initialization-->
	<target name="init-xep" depends="init-xsl">
		<path id="xep-classpath">
			<fileset dir="${env.JAVA_HOME}/lib">
				<include name="tools.jar"/>
			</fileset>
			<fileset dir="${XEP-path}/lib">
				<include name="xep*.jar"/>
				<include name="xt.jar"/>
				<include name="saxon.jar"/>
				<include name="XEPTask.jar"/>
			</fileset>
		</path>
		<!--xep task definition-->
		<taskdef name="xep" classname="com.renderx.xepx.ant.XEPTask"
			classpathref="xep-classpath"/>
	</target>
	<!--transformation to post script if specified by ps-intermediate-->
	<target name="to-ps-if-ps-intermediate"
		if="ps-intermediate"
		depends="to-fo,init-xep">
		<xep in="${build}/${xml-stem}.fo" out="${build}/${xml-stem}.ps"
			format="PostScript">
			<sysproperty key="com.renderx.xep.CONFIG" value="${xep.xml}"/>
		</xep>
		<available property="fo-ps-available" file="${build}/${xml-stem}.ps"/>
		<fail message="${build}/${xml-stem}.ps not created from fo"
			unless="fo-ps-available"/>
	</target>
	<!--transformation to pdf after postscript-->
	<target name="to-pdf-if-ps-intermediate"
		if="ps-intermediate"
		depends="to-ps-if-ps-intermediate">
		<exec executable="${ghostscript}" dir="${build}">
			<arg value="-dCompatibilityLevel=1.4"/>
			<arg value="-q"/>
			<arg value="-dSAFER"/>
			<arg value="-dNOPAUSE"/>
			<arg value="-dBATCH"/>
			<arg value="-sDEVICE=pdfwrite"/>
			<arg value="-sOutputFile=${xml-stem}.pdf"/>
			<arg value="-c"/>
			<arg value=".setpdfwrite"/>
			<arg value="-f"/>
			<arg value="${xml-stem}.ps"/>
		</exec>
		<available property="ps-pdf-available" file="${build}/${xml-stem}.pdf"/>
		<fail message="${build}/${xml-stem}.pdf not created from ps"
			unless="ps-pdf-available"/>
	</target>
	<!--transformation to pdf if post script isn't desired-->
	<target name="to-pdf-unless-ps-intermediate"
			unless="ps-intermediate"
			depends="to-fo,init-xep">
		<xep in="${build}/${xml-stem}.fo" out="${build}/${xml-stem}.pdf"
			format="PDF">
			<sysproperty key="com.renderx.xep.CONFIG" value="${xep.xml}"/>
		</xep>
		<available property="fo-pdf-available" file="${build}/${xml-stem}.pdf"/>
		<fail message="${build}/${xml-stem}.pdf not created from fo"
			unless="fo-pdf-available"/>
	</target>
	<!--transformation to pdf-->
	<target name="to-pdf"
		depends="to-pdf-if-ps-intermediate,to-pdf-unless-ps-intermediate"/>
	<!--transformation to html-->
	<target name="to-html"
		depends="init-xsl,check-html.xsl,check-src-xml">
		<!--exec executable="xsltproc" dir="${build}">
			<arg value="--xinclude"/>
			<arg value="--nonet"/>
			<arg value="-o"/>
			<arg value="${xml-stem}.html"/>
			<arg value="${html.xsl}"/>
			<arg value="${xml-intermediate}"/>
		</exec-->
		<java classname="${xsltclass}"
			fork="true" dir="${build}"
			maxmemory="${xsltmem}"
			classpathref="xsltclasspath">
			<sysproperty key="${docbuild}" value="${docbuildimpl}"/>
			<sysproperty key="${saxparse}" value="${saxparseimpl}"/>
			<sysproperty key="${parseconfig}" value="${xercesconfig}"/>
			<arg value="-r"/>
			<arg value="${resolverclass}"/>
			<arg value="-x"/>
			<arg value="${readerclass}"/>
			<arg value="-y"/>
			<arg value="${readerclass}"/>
			<arg value="-o"/>
			<arg value="${xml-stem}.html"/>
			<arg value="${xml}"/>
			<arg value="${html.xsl}"/>
			<arg value="target.database.document=file:///${buildwithforwardslashes}/olinkdb.xml"/>
			<arg value="target.filename=file:///${buildwithforwardslashes}/target.db"/>
		</java>
	</target>
	<!--transformation to chunked html-->
	<target name="to-html_chunk"
		depends="init-xsl,check-html_chunk.xsl,check-src-xml">
		<java classname="${xsltclass}"
			fork="true" dir="${build}"
			maxmemory="${xsltmem}"
			classpathref="xsltclasspath">
			<sysproperty key="${docbuild}" value="${docbuildimpl}"/>
			<sysproperty key="${saxparse}" value="${saxparseimpl}"/>
			<sysproperty key="${parseconfig}" value="${xercesconfig}"/>
			<arg value="-r"/>
			<arg value="${resolverclass}"/>
			<arg value="-x"/>
			<arg value="${readerclass}"/>
			<arg value="-y"/>
			<arg value="${readerclass}"/>
			<arg value="${xml}"/>
			<arg value="${html_chunk.xsl}"/>
			<arg value="target.database.document=file:///${buildwithforwardslashes}/olinkdb.xml"/>
			<arg value="target.filename=file:///${buildwithforwardslashes}/target.db"/>
		</java>
	</target>
	<!--transformation to xhtml-->
	<target name="to-xhtml"
		depends="init-xsl,check-xhtml.xsl,check-src-xml">
		<java classname="${xsltclass}"
			fork="true" dir="${build}"
			maxmemory="${xsltmem}"
			classpathref="xsltclasspath">
			<sysproperty key="${docbuild}" value="${docbuildimpl}"/>
			<sysproperty key="${saxparse}" value="${saxparseimpl}"/>
			<sysproperty key="${parseconfig}" value="${xercesconfig}"/>
			<arg value="-r"/>
			<arg value="${resolverclass}"/>
			<arg value="-x"/>
			<arg value="${readerclass}"/>
			<arg value="-y"/>
			<arg value="${readerclass}"/>
			<arg value="-o"/>
			<arg value="${xml-stem}.xhtml"/>
			<arg value="${xml}"/>
			<arg value="${xhtml.xsl}"/>
			<arg value="target.database.document=file:///${buildwithforwardslashes}/olinkdb.xml"/>
			<arg value="target.filename=file:///${buildwithforwardslashes}/target.db"/>
		</java>
	</target>
	<!--transformation to chunked xhtml-->
	<target name="to-xhtml_chunk"
		depends="init-xsl,check-xhtml_chunk.xsl,check-src-xml">
		<java classname="${xsltclass}"
			fork="true" dir="${build}"
			maxmemory="${xsltmem}"
			classpathref="xsltclasspath">
			<sysproperty key="${docbuild}" value="${docbuildimpl}"/>
			<sysproperty key="${saxparse}" value="${saxparseimpl}"/>
			<sysproperty key="${parseconfig}" value="${xercesconfig}"/>
			<arg value="-r"/>
			<arg value="${resolverclass}"/>
			<arg value="-x"/>
			<arg value="${readerclass}"/>
			<arg value="-y"/>
			<arg value="${readerclass}"/>
			<arg value="${xml}"/>
			<arg value="${xhtml_chunk.xsl}"/>
			<arg value="target.database.document=file:///${buildwithforwardslashes}/olinkdb.xml"/>
			<arg value="target.filename=file:///${buildwithforwardslashes}/target.db"/>
		</java>
	</target>
	<!--move to dist-->
	<!--target name="move-build-to-dist" depends="to-pdf,to-html,to-xhtml,to-html_chunk,to-xhtml_chunk"-->
	<target name="move-build-to-dist" depends="to-html">
		<property name="MakePathsRelative.m"
			location="${mmade_xml_parent_dir}/XML/Ant/MakePathsRelative.m"/>
		<path id="makepathsrelativefiles">
			<fileset dir="${build}">
				<include name="**/*.html"/>
				<include name="**/*.xhtml"/>
			</fileset>
		</path>
		<mathematica exe="${math}">
			<![CDATA[Get@AntProperty["MakePathsRelative.m"]]]>
		</mathematica>
		<move todir="${dist}">
			<fileset dir="${build}"/>
		</move>
	</target>
	<!--all-->
	<target name="all" depends="move-build-to-dist"/>
	<!--cleaning-->
	<target name="clean">
		<delete dir="${build}" includeemptydirs="true"/>
	</target>
	<!--cleaning everything-->
	<target name="dist-clean" depends="clean">
		<delete dir="${dist}" includeemptydirs="true"/>
	</target>
	<target name="help" description="Displays help about the project.">
		<echo>os: ${os.name}</echo>
		<echo>project: ${ant.project.name}</echo>
		<echo>java: ${ant.java.version}</echo>
		<echo>base directory: ${basedir}</echo>
		<echo>Try ant -projecthelp</echo>
	</target>
</project>